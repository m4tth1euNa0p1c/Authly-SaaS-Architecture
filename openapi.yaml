openapi: 3.0.3
info:
  title: Authly – Authentification Universelle
  description: >
    Service SaaS pour gérer l'authentification OAuth2, la gestion des rôles, 
    la sécurité via JWT et l'intégration de Firebase/GCP.  
    Cette specification OpenAPI décrit l'API de Authly – Authentification Universelle.
  version: "1.0.0"

servers:
  - url: http://127.0.0.1:8000
    description: Serveur local de développement
  - url: https://api.authly.io
    description: Serveur de production (exemple)

tags:
  - name: Auth
    description: Endpoints liés à l'authentification et à l'autorisation
  - name: Users
    description: Gestion des utilisateurs
  - name: Roles
    description: Gestion des rôles
  - name: Permissions
    description: Gestion des permissions

paths:
  /auth/login:
    post:
      tags:
        - Auth
      summary: Authentifier un utilisateur
      description: >
        Authentifie un utilisateur via email/mot de passe **ou** via un code OAuth 
        obtenu d'un provider (Google, GitHub, Facebook).  
        Retourne un JWT (ou un token Firebase) si la connexion est validée.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Succès de la connexion
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Données invalides (format, champs manquants, etc.)
        '401':
          description: Échec de l'authentification (identifiants incorrects)
        '500':
          description: Erreur interne du serveur

  /auth/logout:
    post:
      tags:
        - Auth
      summary: Déconnecter un utilisateur
      description: >
        Invalide la session ou le token de l'utilisateur connecté.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Succès de la déconnexion
        '401':
          description: Token invalide ou expiré
        '500':
          description: Erreur interne du serveur

  /auth/refresh:
    post:
      tags:
        - Auth
      summary: Rafraîchir un token
      description: >
        Permet de rafraîchir le token JWT ou d'obtenir un nouveau jeton 
        si l'ancien est expiré mais que l'utilisateur dispose d'un refresh_token valide.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Succès de l'opération, renvoie un nouveau token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefreshResponse'
        '401':
          description: Jeton de rafraîchissement invalide ou expiré
        '500':
          description: Erreur interne

  /auth/oauth/{provider}:
    get:
      tags:
        - Auth
      summary: Déclencher un flux OAuth avec un provider
      description: >
        Redirige vers le provider OAuth spécifié (google, github, facebook).  
        L'URL de callback, côté front-end, traitera la réponse pour ensuite appeler `/auth/login`.
      parameters:
        - name: provider
          in: path
          required: true
          schema:
            type: string
            enum: [google, github, facebook]
          description: Provider OAuth à utiliser
      responses:
        '302':
          description: Redirection vers la page d'authentification du provider
        '400':
          description: Provider non supporté

  /users:
    get:
      tags:
        - Users
      summary: Lister les utilisateurs
      description: >
        Retourne la liste paginée des utilisateurs existants dans le système.
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
          description: Numéro de la page
        - name: pageSize
          in: query
          schema:
            type: integer
            default: 10
          description: Nombre d'éléments par page
      responses:
        '200':
          description: Liste des utilisateurs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserListResponse'
        '401':
          description: Non autorisé (token manquant ou invalide)
        '500':
          description: Erreur interne

    post:
      tags:
        - Users
      summary: Créer un nouvel utilisateur
      description: >
        Crée un nouvel utilisateur (pour un usage interne, par exemple depuis un back-office).
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateRequest'
      responses:
        '201':
          description: Utilisateur créé avec succès
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Données invalides
        '401':
          description: Non autorisé
        '500':
          description: Erreur interne

  /users/{userId}:
    get:
      tags:
        - Users
      summary: Obtenir les informations d'un utilisateur
      description: >
        Retourne les informations détaillées d'un utilisateur.
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          description: ID unique de l'utilisateur
          schema:
            type: string
      responses:
        '200':
          description: Détails de l'utilisateur
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Non autorisé (token manquant ou invalide)
        '404':
          description: Utilisateur non trouvé
        '500':
          description: Erreur interne

    patch:
      tags:
        - Users
      summary: Mettre à jour un utilisateur
      description: >
        Met à jour partiellement les informations d'un utilisateur (rôle, email, etc.).
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          description: ID unique de l'utilisateur
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateRequest'
      responses:
        '200':
          description: Utilisateur mis à jour
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Données invalides
        '401':
          description: Non autorisé
        '404':
          description: Utilisateur non trouvé
        '500':
          description: Erreur interne

    delete:
      tags:
        - Users
      summary: Supprimer un utilisateur
      description: >
        Supprime définitivement l'utilisateur du système.
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Utilisateur supprimé avec succès (pas de contenu renvoyé)
        '401':
          description: Non autorisé
        '404':
          description: Utilisateur non trouvé
        '500':
          description: Erreur interne

  /roles:
    get:
      tags:
        - Roles
      summary: Lister les rôles disponibles
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Retourne la liste des rôles
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Role'
        '401':
          description: Non autorisé
        '500':
          description: Erreur interne

    post:
      tags:
        - Roles
      summary: Créer un nouveau rôle
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleCreateRequest'
      responses:
        '201':
          description: Rôle créé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        '400':
          description: Données invalides
        '401':
          description: Non autorisé
        '500':
          description: Erreur interne

  /roles/{roleId}:
    patch:
      tags:
        - Roles
      summary: Mettre à jour un rôle
      security:
        - bearerAuth: []
      parameters:
        - name: roleId
          in: path
          required: true
          schema:
            type: string
          description: ID du rôle à modifier
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleUpdateRequest'
      responses:
        '200':
          description: Rôle mis à jour
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        '400':
          description: Données invalides
        '401':
          description: Non autorisé
        '404':
          description: Rôle non trouvé
        '500':
          description: Erreur interne

    delete:
      tags:
        - Roles
      summary: Supprimer un rôle
      security:
        - bearerAuth: []
      parameters:
        - name: roleId
          in: path
          required: true
          schema:
            type: string
          description: ID du rôle à supprimer
      responses:
        '204':
          description: Rôle supprimé
        '401':
          description: Non autorisé
        '404':
          description: Rôle non trouvé
        '500':
          description: Erreur interne

  /permissions:
    get:
      tags:
        - Permissions
      summary: Lister les permissions disponibles
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Retourne la liste des permissions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Permission'
        '401':
          description: Non autorisé
        '500':
          description: Erreur interne

    post:
      tags:
        - Permissions
      summary: Créer une nouvelle permission
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PermissionCreateRequest'
      responses:
        '201':
          description: Permission créée
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Permission'
        '400':
          description: Données invalides
        '401':
          description: Non autorisé
        '500':
          description: Erreur interne

  /permissions/{permissionId}:
    patch:
      tags:
        - Permissions
      summary: Mettre à jour une permission
      security:
        - bearerAuth: []
      parameters:
        - name: permissionId
          in: path
          required: true
          schema:
            type: string
          description: ID de la permission
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PermissionUpdateRequest'
      responses:
        '200':
          description: Permission mise à jour
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Permission'
        '400':
          description: Données invalides
        '401':
          description: Non autorisé
        '404':
          description: Permission non trouvée
        '500':
          description: Erreur interne

    delete:
      tags:
        - Permissions
      summary: Supprimer une permission
      security:
        - bearerAuth: []
      parameters:
        - name: permissionId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Permission supprimée
        '401':
          description: Non autorisé
        '404':
          description: Permission non trouvée
        '500':
          description: Erreur interne

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    # ========================
    # Auth
    # ========================
    LoginRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
        oauth_code:
          type: string
          description: Code OAuth renvoyé par un provider (facultatif)
        provider:
          type: string
          description: Provider OAuth (google, github, facebook)
      example:
        email: "johndoe@example.com"
        password: "mypassword"

    LoginResponse:
      type: object
      properties:
        access_token:
          type: string
          description: Jeton JWT ou token Firebase
        token_type:
          type: string
          description: Type du jeton
        expires_in:
          type: integer
          description: Durée de validité du jeton en secondes
        refresh_token:
          type: string
          description: Token de rafraîchissement
      example:
        access_token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        token_type: "Bearer"
        expires_in: 3600
        refresh_token: "Rfresht0ken..."

    RefreshResponse:
      type: object
      properties:
        access_token:
          type: string
        token_type:
          type: string
        expires_in:
          type: integer
      example:
        access_token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        token_type: "Bearer"
        expires_in: 3600

    # ========================
    # Users
    # ========================
    User:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
          format: email
        role:
          type: string
          description: Rôle de l'utilisateur
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - id
        - email
        - role

    UserListResponse:
      type: object
      properties:
        total:
          type: integer
        page:
          type: integer
        pageSize:
          type: integer
        data:
          type: array
          items:
            $ref: '#/components/schemas/User'
      example:
        total: 42
        page: 1
        pageSize: 10
        data:
          - id: "user_123"
            email: "john@example.com"
            role: "user"
            created_at: "2023-09-10T12:34:56Z"
            updated_at: "2023-09-10T12:34:56Z"

    UserCreateRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
        role:
          type: string
      required:
        - email
        - password
      example:
        email: "newuser@example.com"
        password: "NewUserPassword123"
        role: "user"

    UserUpdateRequest:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
        role:
          type: string
      example:
        role: "admin"

    # ========================
    # Roles
    # ========================
    Role:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
          description: Nom du rôle
        description:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - id
        - name

    RoleCreateRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
      required:
        - name
      example:
        name: "manager"
        description: "Rôle permettant de gérer certains aspects de l'application"

    RoleUpdateRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
      example:
        description: "Rôle manager mis à jour"

    # ========================
    # Permissions
    # ========================
    Permission:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
          description: Nom de la permission
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - id
        - name

    PermissionCreateRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
      required:
        - name
      example:
        name: "edit_user"
        description: "Autorise l'édition d'un utilisateur"

    PermissionUpdateRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
      example:
        description: "Permission mise à jour"
